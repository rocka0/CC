#!/usr/bin/python

from http.server import BaseHTTPRequestHandler, HTTPServer
from json import loads
from blessings import Terminal
from os import system

term = Terminal()

MAIN_CODE_BASE_NAME = "app"
MAIN_CODE_EXTENSION = "cpp"
MAIN_CODE_FILE = MAIN_CODE_BASE_NAME + '.' + MAIN_CODE_EXTENSION

def exec(cmd):
    return system(cmd) == 0

class handler(BaseHTTPRequestHandler):
    def do_POST(self):
        content_length = int(self.headers['Content-Length'])
        data = loads(self.rfile.read(content_length).decode('utf-8'))
        folderName = data['languages']['java']['taskClass']

        executed = exec(f"mkdir {folderName}")
        if not executed:
            print(term.red(term.bold("[WARN]")), term.bold(term.blue("Deleting old folder")))
            exec(f"rm -r {folderName}")
            exec(f"mkdir {folderName}")

        exec(f"touch {folderName}/{MAIN_CODE_FILE}")
        exec(f"cp boo.h {folderName}/boo.h")
        exec(f"subl {folderName}/{MAIN_CODE_FILE}")
        exec(f"mkdir {folderName}/inputs")
        exec(f"mkdir {folderName}/outputs")
        exec(f"touch {folderName}/in")
        exec(f"touch {folderName}/out")
        exec(f"cp compile {folderName}/compile")
        exec(f"chmod +x {folderName}/compile")
        exec(f"cp run {folderName}/run")
        exec(f"chmod +x {folderName}/run")

        counter = 0
        for test in data['tests']:
            counter += 1
            with open(f"./{folderName}/inputs/in{counter}", "w") as file:
                file.write(test['input'])
            with open(f"./{folderName}/outputs/out{counter}", "w") as file:
                file.write(test['output'])

        print(term.green(term.bold("[OK]")), term.bold(term.blue("Parsed problem statement!")))
        print(term.blue("Saved to:"), term.bold(term.red(folderName)))

        return

def main():
    try:
        with HTTPServer(('localhost', 1327), handler) as server:
            server.serve_forever()
    except KeyboardInterrupt:
        print(term.red(term.bold("\n[DONE]")), term.bold(term.blue("Shutting down parser.")))

    return 0

if __name__ == "__main__":
    main()
