#!/usr/bin/python

from random import randint, shuffle, choice

def getInt(a, b):
    """
    Returns a random integer x which lies in the range [a,b].
        Parameters:
            a (int): Lower bound
            b (int): Upper bound
        Returns:
            x (int): The random number
    """

    assert a <= b, f"getInt({a},{b}) has a > b"
    a = int(a)
    b = int(b)
    return randint(a, b)

def getPair(a, b, way = 1):
    """
    Returns a random pair of integers (x,y) such that x and y lie in the range [a,b].
        Parameters:
            a (int):    Lower bound
            b (int):    Upper bound

            way (int):  Decides the ordering of the pairs:

                (way = 1) => random

                (way = 2) => strictly increasing

                (way = 3) => weakly increasing

                (way = 4) => strictly decreasing

                (way = 5) => weakly decreasing
        Returns:
            (x,y): Randomly generated pair of integers
    """

    a = int(a)
    b = int(b)
    way = int(way)

    x = getInt(a,b)

    if way == 1:
        y = getInt(a, b)
    elif way == 2:
        assert a < b, "a < b for strictly increasing"
        while(x == b):
            x = getInt(a,b)
        y = getInt(x+1, b)
    elif way == 3:
        y = getInt(x, b)
    elif way == 4:
        assert a < b, "a < b for strictly decreasing"
        while(x == a):
            x = getInt(a,b)
        y = getInt(a, x-1)
    elif way == 5:
        y = getInt(a, x)
    else:
        raise RuntimeError("Invalid way passed")

    return (x,y)

def getArray(n, a, b):
    """
    Returns a random array of size n of random integers in the range [a,b].
        Parameters:
            n (int): Size of Array
            a (int): Lower bound
            b (int): Upper bound
        Returns:
            arr ([int]): The randomly generated array
    """

    n = int(n)
    a = int(a)
    b = int(b)
    arr = [0 for _ in range(n)]
    for i in range(n):
        arr[i] = getInt(a,b)
    return arr

def getUniqueArray(n,a,b):
    """
    Returns a random array of size n of random integers in [a,b] range,
    where each element occurs exactly 1 time in the array.
        Parameters:
            n (int): Size of Array
            a (int): Lower bound
            b (int): Upper bound
        Returns:
            arr ([int]): The randomly generated array
    """

    n = int(n)
    a = int(a)
    b = int(b)
    assert b - a + 1 >= n, "Possible number of elements should be at least n"
    arr = []
    seen = set([])
    while(len(arr) < n):
        ele = getInt(a,b)
        if ele in seen:
            continue
        else:
            arr.append(ele)
            seen.add(ele)
    return arr

def getPermutation(n):
    """
    Returns a random permutation of the integers from [1,n].
        Parameters:
            n (int): Size of Permutation
        Returns:
            arr ([int]): The randomly generated permutation
    """

    n = int(n)
    arr = []
    for i in range(1, n+1):
        arr.append(i)
    shuffle(arr)
    return arr

def printArray(arr):
    """
    Prints out an array with no leading or trailing whitespaces.
        Parameters:
            arr ([int]): The array to be printed
        Returns:
            None
    """

    print(" ".join([str(x) for x in arr]))
    return

def getMatrix(n, m, a, b):
    """
    Returns a matrix of size n X m where each element lies in the range [a,b].
        Parameters:
            n (int): Number of rows
            m (int): Number of columns
            a (int): Lower bound
            b (int): Upper bound
        Returns:
            mat ([int][int]): The randomly generated matrix
    """

    n = int(n)
    m = int(n)
    a = int(a)
    b = int(b)
    mat = []
    for _ in range(n):
        mat.append(getArray(m, a, b))
    return mat

def printMatrix(mat):
    """
    Prints a matrix with no leading or trailing whitespaces.
        Parameters:
            mat ([int][int]): The matrix to be printed
        Returns:
            None
    """

    for i in range(len(mat)):
        printArray(mat[i])
    return

lowerCaseAlphabet = "abcdefghijklmnopqrstuvwxyz"
upperCaseAlphabet = lowerCaseAlphabet.upper()

def getString(n, ALLOWED = lowerCaseAlphabet):
    """
    Returns a random string of size n consisting of only characters from ALLOWED
        Parameters:
            n (int): Size of the string
            ALLOWED (string): Set of allowed characters
        Returns:
            ans (string): The randomly generated string
    """

    assert len(ALLOWED) > 0, "There must be at least one possible character"
    ans = []
    while(len(ans) < n):
        ans.append(choice(ALLOWED))
    return "".join(ans)

def getCharMatrix(n, m, ALLOWED = lowerCaseAlphabet):
    """
    Returns a random string of size n consisting of only characters from ALLOWED
        Parameters:
            n (int): Number of rows
            m (int): Number of columns
            ALLOWED (string): Set of allowed characters
        Returns:
            ans ([[string]]): The randomly generated matrix
    """

    ans = []
    for _ in range(n):
        temp = []
        for _ in range(m):
            temp.append(choice(ALLOWED))
        ans.append(temp)
    return ans

def printCharMatrix(mat):
    """
    Returns a random string of size n consisting of only characters from ALLOWED
        Parameters:
            mat ([[string]]): The matrix to be printed
        Returns:
            None
    """

    for i in range(len(mat)):
        print("".join(mat[i]))
    return

def main():
    # Generator code goes here

    return 0

if __name__ == '__main__':
    main()
